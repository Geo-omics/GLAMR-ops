#!/usr/bin/env python3
"""
Generate html for search query statistics
"""
import argparse
from datetime import datetime
from html import escape
from pathlib import Path
import sys


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'access_logs',
    nargs='+',
    help='Apache access logs',
)
argp.add_argument(
    '-o', '--outfile',
    help='Output file',
)
args = argp.parse_args()


def err(*args, **kwargs):
    kwargs.setdefault('file', sys.stderr)
    print(*args, **kwargs)


"""
1. Collect data
"""
queries = {}
for fname in args.access_logs:
    with open(fname) as ifile:
        for line in ifile:
            line = line.strip()
            row = line.split()
            ts, tz = row[3:5]
            meth, url = row[5:7]

            try:
                ts = datetime.strptime(f'{ts} {tz}', '[%d/%b/%Y:%H:%M:%S %z]')
            except Exception as e:
                err(f'Bad line [timestamp, {e}]: {line}')

            if not meth == '"GET':
                continue

            if not url.startswith('/search/'):
                continue

            if url == '/search/':
                # is the normal search/filter page
                continue

            path, _, querystr = url.partition('?')
            try:
                _, scope = path.strip('/').split('/')
            except ValueError:
                # no scope?
                err(f'Bad line [no scope]: {line}')

            found_qstr = False
            for i in querystr.split('&'):
                try:
                    lhs, _, rhs = i.partition('=')
                except ValueError:
                    # no =
                    print(f'BORK {i=}')
                    continue

                if lhs == 'query':
                    if found_qstr:
                        err(f'Bad line [double querystr]: {line}')
                        break

                    found_qstr = True
                    data = queries.get((scope, rhs), None)
                    if data is None:
                        count = 1
                    else:
                        count, ts0 = data
                        count += 1
                        ts = max(ts0, ts)  # keep newest

                    queries[(scope, rhs)] = (count, ts)

            if not found_qstr:
                # crawlers often request earch rl path w/o querystring
                continue

"""
2. HTML template
"""
HTML = """
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>GLAMR web analytics</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
</head>
<body>
<div class="container-fluid">
<div class="container-fluid pt-4">
    <h1>greatlakesomics.org recent search queries</h1>
    <table class="table table-sm table-striped-columns">
    <thead><tr>
        <th scope="col">last seen</th>
        <th scope="col">count</th>
        <th scope="col">scope</th>
        <th scope="col">query</th>
    </tr></thead>
    <tbody>
PLACEHOLDER
    </tbody>
    </table>
</div>
</div>
</body>
</html>
"""

"""
3. Compile HTML
"""

TEMPLATE = '    <tr><td>{ts}</td><td>{count}</td></td><td>{scope}</td><td>{query}</td></tr>'  # noqa:E501
lines = [
    TEMPLATE.format(
        ts=ts,
        count=count,
        scope=escape('*' if scope == 'global' else scope),
        query=escape(query),
    )
    for (scope, query), (count, ts)
    in reversed(sorted(queries.items(), key=lambda x: x[1][1]))  # newest first
]
html = HTML.replace('PLACEHOLDER', '\n'.join(lines))
html = html.strip()
if args.outfile:
    Path(args.outfile).write_text(html)
else:
    print(html)
